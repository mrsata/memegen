name: enumerator
version: 0.4.20
id: enumerator-0.4.20-8c1ac86c9d5e095f6d03fc7200e0b3ac
key: enume_LyDnEQ6F69uDubH559Giin
license: MIT
copyright: 2010-2011 John Millikin, 2011 Mikhail Vorozhtsov
maintainer: jmillikin@gmail.com
stability: experimental
homepage: https://john-millikin.com/software/enumerator/
synopsis: Reliable, high-performance processing with left-fold enumerators
description:
    Typical buffer&#x2013;based incremental I/O is based around a single loop,
    which reads data from some source (such as a socket or file), transforms
    it, and generates one or more outputs (such as a line count, HTTP
    responses, or modified file). Although efficient and safe, these loops are
    all single&#x2013;purpose; it is difficult or impossible to compose
    buffer&#x2013;based processing loops.
    .
    Haskell&#x2019;s concept of &#x201C;lazy I/O&#x201D; allows pure code to
    operate on data from an external source. However, lazy I/O has several
    shortcomings. Most notably, resources such as memory and file handles can
    be retained for arbitrarily long periods of time, causing unpredictable
    performance and error conditions.
    .
    Enumerators are an efficient, predictable, and safe alternative to lazy
    I/O. Discovered by Oleg Kiselyov, they allow large datasets to be processed
    in near&#x2013;constant space by pure code. Although somewhat more complex
    to write, using enumerators instead of lazy I/O produces more correct
    programs.
    .
    This library contains an enumerator implementation for Haskell, designed to
    be both simple and efficient. Three core types are defined, along with
    numerous helper functions:
    .
    * /Iteratee/: Data sinks, analogous to left folds. Iteratees consume
    a sequence of /input/ values, and generate a single /output/ value.
    Many iteratees are designed to perform side effects (such as printing to
    @stdout@), so they can also be used as monad transformers.
    .
    * /Enumerator/: Data sources, which generate input sequences. Typical
    enumerators read from a file handle, socket, random number generator, or
    other external stream. To operate, enumerators are passed an iteratee, and
    provide that iteratee with input until either the iteratee has completed its
    computation, or EOF.
    .
    * /Enumeratee/: Data transformers, which operate as both enumerators and
    iteratees. Enumeratees read from an /outer/ enumerator, and provide the
    transformed data to an /inner/ iteratee.
category: Data, Enumerator
author: John Millikin <jmillikin@gmail.com>
exposed: True
exposed-modules:
    Data.Enumerator Data.Enumerator.Binary Data.Enumerator.Internal
    Data.Enumerator.IO Data.Enumerator.List Data.Enumerator.Text
    Data.Enumerator.Trans
hidden-modules: Data.Enumerator.Compatibility Data.Enumerator.Util
trusted: False
import-dirs: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/lib/x86_64-osx-ghc-7.10.3/enumerator-0.4.20-LyDnEQ6F69uDubH559Giin
library-dirs: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/lib/x86_64-osx-ghc-7.10.3/enumerator-0.4.20-LyDnEQ6F69uDubH559Giin
data-dir: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/share/x86_64-osx-ghc-7.10.3/enumerator-0.4.20
hs-libraries: HSenumerator-0.4.20-LyDnEQ6F69uDubH559Giin
depends:
    base-4.8.2.0-bfcc6de9ee2962ae54db40ece3022dc5
    bytestring-0.10.6.0-acad045b3a1833aefbe19db17d332c3a
    containers-0.5.6.2-1281f6ac62b47acf472f6cdcec6a4f4b
    text-1.2.2.1-3d0a931105ed331bf2fb8b46dcae08ba
    transformers-0.4.2.0-81450cd8f86b36eaa8fa0cbaf6efc3a3
haddock-interfaces: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/doc/enumerator-0.4.20/enumerator.haddock
haddock-html: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/doc/enumerator-0.4.20
