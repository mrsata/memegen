name: scientific
version: 0.3.4.9
id: scientific-0.3.4.9-61090402eefa2734bea7d6d38d30e6de
key: scien_1WVNjGUftkQ9QzH4DOM2n1
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
                GHC.Integer.Logarithms.Compat GHC.Integer.Compat Utils
trusted: False
import-dirs: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/lib/x86_64-osx-ghc-7.10.3/scientific-0.3.4.9-1WVNjGUftkQ9QzH4DOM2n1
library-dirs: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/lib/x86_64-osx-ghc-7.10.3/scientific-0.3.4.9-1WVNjGUftkQ9QzH4DOM2n1
data-dir: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/share/x86_64-osx-ghc-7.10.3/scientific-0.3.4.9
hs-libraries: HSscientific-0.3.4.9-1WVNjGUftkQ9QzH4DOM2n1
depends:
    base-4.8.2.0-bfcc6de9ee2962ae54db40ece3022dc5
    binary-0.7.5.0-bb2dcbe8d4c53898daa6ddc1a04a77a3
    bytestring-0.10.6.0-acad045b3a1833aefbe19db17d332c3a
    containers-0.5.6.2-1281f6ac62b47acf472f6cdcec6a4f4b
    deepseq-1.4.1.1-8eec8f9bea2efc2500f63544ec6ca569
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.4.0-3250ea34f9cb1d491a857fb6cd256268
    integer-gmp-1.0.0.0-3c8c40657a9870f5c33be17496806d8d
    text-1.2.2.1-3d0a931105ed331bf2fb8b46dcae08ba
    vector-0.11.0.0-324da2b07f25721d305480db94a9f1d6
haddock-interfaces: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/doc/scientific-0.3.4.9/scientific.haddock
haddock-html: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/doc/scientific-0.3.4.9
