
==================== FINAL INTERFACE ====================
2016-11-09 08:52:04.695015 UTC

interface memeg_LmMZFBFGUdZD6ANCDaWLKw:Memegen.Lib 7103
  interface hash: 2048eccd26ec5f1433a6424a8037a52e
  ABI hash: 29df56560edc4eb398f519bf489bd266
  export-list hash: 363a888e28d841b96488ad817879335c
  orphan hash: 18bfb2153e840597fb4564e6c66dd311
  flag hash: e4193899c41c06e09963cdae51b506e1
  sig of: Nothing
  used TH splices: False
  where
exports:
  Memegen.Lib.memegenEntry
module dependencies: Memegen.App Memegen.Db Memegen.Img
package dependencies: MonadCatchIO-transformers-0.3.1.3@Monad_BSHaJtnktpVL405Pj6vJr0
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      StateVar-1.1.0.4@State_IOvB80WkYNkEizdt0JVpzy
                      adjunctions-4.3@adjun_C10YYg4JKnvECCafjMc7Cx
                      aeson-0.9.0.1@aeson_7kzmP8EaHItJ9ePj7u6Xdz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3
                      attoparsec-enumerator-0.3.4@attop_IPMpldG9HEZAWZEN35Kk9z
                      base-4.8.2.0 base-orphans-0.5.4@baseo_0gFtKFBT26OGSKHmmdqdfx
                      bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-textual-0.2.1.0@blaze_2Mh6jNrscJA0Vy1dvfsxqd
                      blaze-builder-enumerator-0.2.1.0@blaze_3cX4P2HCRhg4D80pRlSDLp
                      blaze-builder-0.4.0.2@blaze_5LQurmvTy7l9rPlWgPlNE4
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      bytestring-mmap-0.2.2@bytes_838cPOnJ61dLulQP6D7UWj
                      case-insensitive-1.2.0.6@casei_KREfefAtA7j6zRZtlU9vZn
                      comonad-4.2.7.2@comon_ElAx0Rjzx8E1yBgPLG9vo4
                      configurator-0.3.0.0@confi_DkEPU0D3jb33mg0BYCnGkf
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      contravariant-1.4@contr_22YLlupq7YX6QkREpuVZLZ
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      directory-tree-0.12.0@direc_858T1RVMWwiLQQo0odiu52
                      direct-sqlite-2.3.17@direc_D3duxzilrPKH1oKv2GTiAL
                      distributive-0.5.0.2@distr_55SIdsoyihS4jXBaaVvPQX
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      either-4.4.1.1@eithe_54U3iYXzqgo9xoUaZZ787k
                      enumerator-0.4.20@enume_LyDnEQ6F69uDubH559Giin
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      extensible-exceptions-0.1.1.4@exten_FEBYnjUcabpEXD3JqlYlJc
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m
                      free-4.12.4@free_LEDWBfYq7or1UQsEbuMkWk
                      gd-3000.7.3@gd_5vWRwb8ptBsKiu9qT5e7Cl ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      kan-extensions-4.2.3@kanex_GCQzlMzWfjMAfss4KagmLi
                      lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE
                      mmorph-1.0.6@mmorp_42KUkOfzC6q3qCtAMiSHam
                      monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      prelude-extras-0.4.0.3@prelu_1gQpKVfMHul71LsAFgGRhv
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      profunctors-5.2@profu_AYhGmZJowvVFcoLtEhpyqO
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      reflection-2.1.2@refle_Is9SiIf9zRHG2wDNDxPaS9
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      semigroups-0.18.1@semig_Iivsiy35cmk8ISqG11MEap
                      semigroupoids-5.0.1@semig_K5pPYL0uxLMD2QVvKcbzPf
                      snap-0.14.0.7@snap_6GPj5fu1CsgKwE4lubhqik
                      snap-core-0.9.8.0@snapc_LeD7JW8edKOKVcNJKNfo1o
                      snaplet-sqlite-simple-0.4.8.3@snapl_EVcvZphzioh1GKLIEGpBEq
                      snap-server-0.9.5.1@snaps_FOuAo5S7AtCHreynBKAdwZ
                      sqlite-simple-0.4.9.0@sqlit_DAfDNdRjEcg8pYUAjYfpdN
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      streaming-commons-0.1.15.5@strea_EmmPiWycOZRDBDTh9xaABj
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6 template-haskell-2.10.0.0
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unix-compat-0.4.1.4@unixc_Km8uiabmElX5mrb8D4Fywe
                      unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
                      zlib-bindings-0.1.1.5@zlibb_4TLHzVhj5c37rqLzkivtLr
                      zlib-enum-0.2.3.1@zlibe_0vMFCFBtq5X86FS1uoJqxg
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         aeson-0.9.0.1@aeson_7kzmP8EaHItJ9ePj7u6Xdz:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_7kzmP8EaHItJ9ePj7u6Xdz:Data.Aeson.Types.Instances
         attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         base-orphans-0.5.4@baseo_0gFtKFBT26OGSKHmmdqdfx:Data.Orphans
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         configurator-0.3.0.0@confi_DkEPU0D3jb33mg0BYCnGkf:Data.Configurator.Instances
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         reflection-2.1.2@refle_Is9SiIf9zRHG2wDNDxPaS9:Data.Reflection
         snap-core-0.9.8.0@snapc_LeD7JW8edKOKVcNJKNfo1o:Snap.Internal.Instances
         snap-core-0.9.8.0@snapc_LeD7JW8edKOKVcNJKNfo1o:Snap.Iteratee
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjun_C10YYg4JKnvECCafjMc7Cx:Data.Functor.Rep
                         attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         base-4.8.2.0:GHC.TypeLits
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Biff
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Clown
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Flip
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Join
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Joker
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Product
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Sum
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Tannen
                         bifunctors-5.2@bifun_L0Ghdk6Opc6CwEeyCfklQC:Data.Bifunctor.Wrapped
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         either-4.4.1.1@eithe_54U3iYXzqgo9xoUaZZ787k:Control.Monad.Trans.Either
                         kan-extensions-4.2.3@kanex_GCQzlMzWfjMAfss4KagmLi:Data.Functor.Yoneda
                         lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE:Control.Lens.At
                         lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE:Control.Lens.Internal.Indexed
                         lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE:Control.Lens.Internal.Zoom
                         lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE:Control.Lens.Reified
                         lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE:Control.Lens.Tuple
                         lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE:Control.Lens.Wrapped
                         monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS:Control.Monad.Trans.Control
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         profunctors-5.2@profu_AYhGmZJowvVFcoLtEhpyqO:Data.Profunctor.Rep
                         semigroups-0.18.1@semig_Iivsiy35cmk8ISqG11MEap:Data.List.NonEmpty
                         semigroups-0.18.1@semig_Iivsiy35cmk8ISqG11MEap:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm:Data.HashMap.Base
                         unordered-containers-0.2.7.0@unord_2BLx4faR35mFWLJj5xiBgm:Data.HashSet
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  aeson-0.9.0.1@aeson_7kzmP8EaHItJ9ePj7u6Xdz:Data.Aeson ef1b56679d451e5c038a8b0c79a9fc81
import  -/  aeson-0.9.0.1@aeson_7kzmP8EaHItJ9ePj7u6Xdz:Data.Aeson.Encode.ByteString bcc2fd6395316d4bc04bd222f9cff18a
import  -/  base-4.8.2.0:Control.Concurrent 1268fba2c60b0505ec9e8731d08a8e75
import  -/  base-4.8.2.0:Control.Concurrent.MVar 3eafccf954c3dcec07c7712da74a8538
import  -/  base-4.8.2.0:Data.Int 1419fa899a36eeb2bd16fdb7f0a89738
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Int 28d8a9f7cfc272358fb4631d98c579ce
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString db2e56635ed30ff269e1492b64605a38
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Internal b99858e89f19feddd3dcb9e9d523065e
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy 7b1dd178b3666e14ba91381002b4b4e3
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Lazy d674f4ccc3ac46ead5b74c3dd9e4f6f4
import  -/  directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm:System.Directory a90331b0d3a954e7d46e510cba448504
import  -/  enumerator-0.4.20@enume_LyDnEQ6F69uDubH559Giin:Data.Enumerator.List 4e5b97cd5087d4b4fc4b6b185fe71d7a
import  -/  filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m:System.FilePath 6a7eafb8f3ea5de45bf8aaade5c8108e
import  -/  filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m:System.FilePath.Posix da2bfc0e51fee241a6f2334547c9597d
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE:Control.Lens 98ba1b67c9b36766f6314021c7281652
import  -/  lens-4.13@lens_6idrjC79FIX20kdNuZ6mCE:Control.Lens.Lens 0fc6a1829f3cc97167789be5219a794f
import  -/  Memegen.App 8dc5dc33723a68aa25e2b6df7118520f
  exports: 8472b1e59a912cb2baa3971bd2990d25
  AppState cbaf1ab3c04405558329db1bdf472538
  AppState 23305d041ea5d15745225f40d158cf62
  db fab113d6ae866e86f52e54309462d22e
import  -/  Memegen.Db a994b833b46adc4a2f90f714ebf7299a
  exports: 8c310feea86950a81100d6301951051c
  createTables 2cbd73a8b7ed027825999e4ba36e861b
  listMemes f39ce327a0c8dc6af87bfaf2ea242402
  saveMeme c058fc88a1b9791e037df057fd9dc8e3
import  -/  Memegen.Img 1b870fb55334566e7c8fd62d25972866
  exports: 9164fb840beb5a66b9787a35ee707b1d
  createMeme 096e456a4041c2045f76fd029ff41ace
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State 3c8114545920fee1e57c3d7a07c2d0d7
import  -/  snap-0.14.0.7@snap_6GPj5fu1CsgKwE4lubhqik:Snap e04040b631ecdf577df78c787b1b557e
import  -/  snap-0.14.0.7@snap_6GPj5fu1CsgKwE4lubhqik:Snap.Snaplet.Internal.Initializer c8e12d8e526a2c33876fff86ce177621
import  -/  snap-0.14.0.7@snap_6GPj5fu1CsgKwE4lubhqik:Snap.Snaplet.Internal.Types eede9fbff2939a5a4b298aff2632cf52
import  -/  snap-core-0.9.8.0@snapc_LeD7JW8edKOKVcNJKNfo1o:Snap.Core 6c1c317d18ff84a02eb99f1c33f606e6
import  -/  snap-core-0.9.8.0@snapc_LeD7JW8edKOKVcNJKNfo1o:Snap.Internal.Http.Types e50121915eed6b19e336e6c8ac63b100
import  -/  snap-core-0.9.8.0@snapc_LeD7JW8edKOKVcNJKNfo1o:Snap.Internal.Types 817ac3a3cbd8b33e3d1c79f5b38cf2bf
import  -/  snap-core-0.9.8.0@snapc_LeD7JW8edKOKVcNJKNfo1o:Snap.Util.FileServe 003773ee9b1b84e4d468d530108339ca
import  -/  snap-core-0.9.8.0@snapc_LeD7JW8edKOKVcNJKNfo1o:Snap.Util.FileUploads f358e4bc341f88f8b305e51aae22e90d
import  -/  snaplet-sqlite-simple-0.4.8.3@snapl_EVcvZphzioh1GKLIEGpBEq:Snap.Snaplet.SqliteSimple 40989e4fec97954ecc27aa42ee5364c1
import  -/  snap-server-0.9.5.1@snaps_FOuAo5S7AtCHreynBKAdwZ:Snap.Internal.Http.Server.Config b895e1ae5510b5d13cd64f3539d2c7a2
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text b53ae191632883b10562be5cbaa0b22b
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Encoding e16d6b6c87938c92abd0e8f893014703
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show 081cc243e944015e37c793c3b0ebfefd
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.IO.Class 37487179a2f5eb2ea7922b911abcae56
d3f72d8dc50d87953d4ec27c49fadafb
  $s$fAlternativeHandler ::
    GHC.Base.Alternative
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Memegen.App.AppState Memegen.App.AppState)
                  Memegen.Lib.$s$fAlternativeHandler1
                  (Snap.Snaplet.Internal.Types.$fAlternativeHandler_$cempty
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fAlternativeHandler_$c<|>
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fAlternativeHandler_$csome
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fAlternativeHandler_$cmany
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fAlternativeHandler1) -}
37e88082619320ba8035e10af1576d80
  $s$fAlternativeHandler1 ::
    GHC.Base.Applicative
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Memegen.Lib.$s$fAlternativeHandler_$s$fApplicativeHandler -}
7ade8dd4261545ac29d1702f46883f42
  $s$fAlternativeHandler_$s$fApplicativeHandler ::
    GHC.Base.Applicative
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Memegen.App.AppState Memegen.App.AppState)
                  (Snap.Snaplet.Internal.Types.$fFunctorHandler
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState)
                  (Snap.Snaplet.Internal.Types.$fApplicativeHandler_$cpure
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Memegen.App.AppState
                        @ Memegen.App.AppState))
                  (Snap.Snaplet.Internal.Types.$fApplicativeHandler_$c<*>
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Memegen.App.AppState
                        @ Memegen.App.AppState))
                  (Snap.Snaplet.Internal.Types.$fApplicativeHandler_$c*>
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Memegen.App.AppState
                        @ Memegen.App.AppState))
                  (Snap.Snaplet.Internal.Types.$fApplicativeHandler_$c<*
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Memegen.App.AppState
                        @ Memegen.App.AppState)) -}
697e05cf5d492b9ccfca1d890f63710f
  $s$fMonadCatchIOHandler ::
    Control.Monad.CatchIO.MonadCatchIO
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Memegen.App.AppState Memegen.App.AppState)
                  Memegen.Lib.$s$fMonadCatchIOHandler1
                  (Snap.Snaplet.Internal.Types.$fMonadCatchIOHandler_$ccatch
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fMonadCatchIOHandler1)
                  (Snap.Snaplet.Internal.Types.$fMonadCatchIOHandler_$cblock
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fMonadCatchIOHandler1)
                  (Snap.Snaplet.Internal.Types.$fMonadCatchIOHandler_$cunblock
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fMonadCatchIOHandler1) -}
18ddcabc27a0e864b4d65ffdd3be9d87
  $s$fMonadCatchIOHandler1 ::
    Control.Monad.IO.Class.MonadIO
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Memegen.Lib.$s$fMonadCatchIOHandler_$s$fMonadIOHandler -}
d75aaf8d9a7c9cb321b31ce05b850a22
  $s$fMonadCatchIOHandler2 ::
    GHC.Base.Monad
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Memegen.Lib.$s$fMonadCatchIOHandler_$s$fMonadHandler -}
77fcbfc0a1837a89fdbd718a1342276b
  $s$fMonadCatchIOHandler_$s$fMonadHandler ::
    GHC.Base.Monad
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Memegen.App.AppState Memegen.App.AppState)
                  Memegen.Lib.$s$fAlternativeHandler1
                  (Snap.Snaplet.Internal.Types.$fMonadHandler_$c>>=
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fMonadHandler_$c>>
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fMonadHandler_$creturn
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fAlternativeHandler1)
                  (Snap.Snaplet.Internal.Types.$fMonadHandler_$cfail
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fAlternativeHandler1) -}
f1aae9507eb09fb882013939a88a892a
  $s$fMonadCatchIOHandler_$s$fMonadIOHandler ::
    Control.Monad.IO.Class.MonadIO
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Memegen.App.AppState Memegen.App.AppState)
                  Memegen.Lib.$s$fMonadCatchIOHandler2
                  (Snap.Snaplet.Internal.Types.$fMonadIOHandler_$cliftIO
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fMonadCatchIOHandler2) -}
eb72cb7d7e9e5b88a19bbae5c67b5e27
  $s$fMonadPlusHandler ::
    GHC.Base.MonadPlus
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Memegen.App.AppState Memegen.App.AppState)
                  Memegen.Lib.$s$fMonadPlusHandler1
                  Memegen.Lib.$s$fMonadCatchIOHandler2
                  (Snap.Snaplet.Internal.Types.$fMonadPlusHandler_$cmzero
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fMonadPlusHandler1
                     Memegen.Lib.$s$fMonadCatchIOHandler2)
                  (Snap.Snaplet.Internal.Types.$fMonadPlusHandler_$cmplus
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fMonadPlusHandler1
                     Memegen.Lib.$s$fMonadCatchIOHandler2) -}
ed2189d26c94faf4b323446e84167700
  $s$fMonadPlusHandler1 ::
    GHC.Base.Alternative
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Memegen.Lib.$s$fAlternativeHandler -}
519415cb432f1226d95caeb4adfb31c5
  $s$fMonadSnapHandler ::
    Snap.Internal.Types.MonadSnap
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Snap.Snaplet.Internal.Types.Handler
                       Memegen.App.AppState Memegen.App.AppState)
                  Memegen.Lib.$s$fMonadCatchIOHandler2
                  Memegen.Lib.$s$fMonadCatchIOHandler1
                  Memegen.Lib.$s$fMonadSnapHandler2
                  Memegen.Lib.$s$fMonadSnapHandler1
                  (Snap.Snaplet.Internal.Types.$fFunctorHandler
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState)
                  Memegen.Lib.$s$fAlternativeHandler1
                  Memegen.Lib.$s$fMonadPlusHandler1
                  (Snap.Snaplet.Internal.Types.$fMonadSnapHandler_$cliftSnap
                     @ Memegen.App.AppState
                     @ Memegen.App.AppState
                     Memegen.Lib.$s$fMonadCatchIOHandler2
                     Memegen.Lib.$s$fMonadCatchIOHandler1
                     Memegen.Lib.$s$fMonadSnapHandler2
                     Memegen.Lib.$s$fMonadSnapHandler1
                     (Snap.Snaplet.Internal.Types.$fFunctorHandler
                        @ Memegen.App.AppState
                        @ Memegen.App.AppState)
                     Memegen.Lib.$s$fAlternativeHandler1
                     Memegen.Lib.$s$fMonadPlusHandler1) -}
8bcef04a000b17fe2f0d520060ad9849
  $s$fMonadSnapHandler1 ::
    GHC.Base.MonadPlus
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Memegen.Lib.$s$fMonadPlusHandler -}
64ef6fa3257b0aa0571bf18886c5f5d4
  $s$fMonadSnapHandler2 ::
    Control.Monad.CatchIO.MonadCatchIO
      (Snap.Snaplet.Internal.Types.Handler
         Memegen.App.AppState Memegen.App.AppState)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Memegen.Lib.$s$fMonadCatchIOHandler -}
079ca711325d6b35f44f82f26cb6d1ce
  $sdb ::
    (Snap.Snaplet.Internal.Types.Snaplet
       Snap.Snaplet.SqliteSimple.Sqlite
     -> Control.Lens.Internal.Context.Pretext
          (->)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.SqliteSimple.Sqlite)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.SqliteSimple.Sqlite)
          (Snap.Snaplet.Internal.Types.Snaplet
             Snap.Snaplet.SqliteSimple.Sqlite))
    -> Memegen.App.AppState
    -> Control.Lens.Internal.Context.Pretext
         (->)
         (Snap.Snaplet.Internal.Types.Snaplet
            Snap.Snaplet.SqliteSimple.Sqlite)
         (Snap.Snaplet.Internal.Types.Snaplet
            Snap.Snaplet.SqliteSimple.Sqlite)
         Memegen.App.AppState
  {- Arity: 2, HasNoCafRefs, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Profunctor.Unsafe.$fProfunctor(->)_$cdimap
                   @ Memegen.App.AppState
                   @ (Snap.Snaplet.Internal.Types.Snaplet
                        Snap.Snaplet.SqliteSimple.Sqlite)
                   @ (Control.Lens.Internal.Context.Pretext
                        (->)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.SqliteSimple.Sqlite)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.SqliteSimple.Sqlite)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.SqliteSimple.Sqlite))
                   @ (Control.Lens.Internal.Context.Pretext
                        (->)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.SqliteSimple.Sqlite)
                        (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.SqliteSimple.Sqlite)
                        Memegen.App.AppState)
                   (\ ds :: Memegen.App.AppState ->
                    case ds of wild { Memegen.App.AppState x -> x })
                   (Control.Lens.Internal.Context.$fFunctorPretext_$cifmap
                      @ (->)
                      @ (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.SqliteSimple.Sqlite)
                      @ Memegen.App.AppState
                      @ (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.SqliteSimple.Sqlite)
                      @ (Snap.Snaplet.Internal.Types.Snaplet
                           Snap.Snaplet.SqliteSimple.Sqlite)
                      Memegen.App.AppState)) -}
1767a0e35466fa467c37931ad4080ba0
  $sencode2 :: [Memegen.Db.Meme] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Memegen.Db.Meme] ->
                 case Memegen.Lib.$wa w of ww { (##) ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
28f405194125ba10d48ea61e7d82bca8
  $sencode3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0) -}
d32cc93021f84575eb1289c35ec5b25d
  $sencode4 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><L,U> -}
61567e0b073d06ee769a05b328590fbe
  $smethod1 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
      (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
    -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
    -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
    -> Snap.Internal.Types.SnapState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Enumerator.Internal.Step
            Data.ByteString.Internal.ByteString
            GHC.Types.IO
            (Snap.Internal.Types.SnapResult
               ((),
                Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState,
                Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState),
             Snap.Internal.Types.SnapState) #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ eta2 :: Control.Lens.Lens.ALens'
                             (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                             (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                   eta3 :: Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                   eta4 :: Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                   eta5 :: Snap.Internal.Types.SnapState
                   eta6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta6,
                    Data.Enumerator.Internal.Yield
                      @ Data.ByteString.Internal.ByteString
                      @ GHC.Types.IO
                      @ (Snap.Internal.Types.SnapResult
                           ((),
                            Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState,
                            Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState),
                         Snap.Internal.Types.SnapState)
                      (Snap.Internal.Types.SnapValue
                         @ ((),
                            Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState,
                            Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                         (GHC.Tuple.(), eta3, eta4),
                       eta5)
                      (Data.Enumerator.Internal.$fApplicativeIteratee1
                         @ Data.ByteString.Internal.ByteString) #)) -}
853bc06a3171b1a58884e74ed5e4bbb1
  $wa :: [Memegen.Db.Meme] -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [Memegen.Db.Meme] ->
                 case GHC.ST.runSTRep
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        (\ @ s s1 :: GHC.Prim.State# s[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                0
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         case Memegen.Lib.$sencode4
                                @ s
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                    @ Data.Aeson.Types.Internal.Value
                                    0
                                    0
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.TFCo:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        s)>_N <Data.Aeson.Types.Internal.Value>_N),
                                 Memegen.Lib.$sencode3)
                                (GHC.Base.map
                                   @ Memegen.Db.Meme
                                   @ Data.Aeson.Types.Internal.Value
                                   Memegen.Db.$fToJSONMeme_$ctoJSON
                                   w)
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                        <s>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.TFCo:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               s)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                @ Data.Aeson.Types.Internal.Value
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.TFCo:R:PrimStateST[0] <s>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              dt
                              dt6
                              ipv3 #) } } } } } }) of dt { Data.Vector.Vector ipv ipv1 ipv2 ->
                 (# dt #) }) -}
01744cb576caed7f680d9e342e839bc5
  $wa1 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
      (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
    -> GHC.Types.Bool
    -> GHC.IORef.IORef (GHC.Types.IO ())
    -> [(Data.ByteString.Internal.ByteString,
         Snap.Snaplet.Internal.Types.Handler
           Memegen.App.AppState Memegen.App.AppState ())]
    -> (Snap.Snaplet.Internal.Types.Handler
          Memegen.App.AppState Memegen.App.AppState ()
        -> Snap.Snaplet.Internal.Types.Handler
             Memegen.App.AppState Memegen.App.AppState ())
    -> Snap.Snaplet.Internal.Types.SnapletConfig
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Data.Text.Internal.Text
    -> GHC.Base.String
    -> ((Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
         -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState,
            Snap.Snaplet.Internal.Types.InitializerState Memegen.App.AppState),
           Snap.Snaplet.Internal.Types.Hook Memegen.App.AppState) #)
  {- Arity: 10,
     Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,1*U(U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Control.Lens.Lens.ALens'
                          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                   ww :: GHC.Types.Bool
                   ww1 :: GHC.IORef.IORef (GHC.Types.IO ())
                   ww2 :: [(Data.ByteString.Internal.ByteString,
                            Snap.Snaplet.Internal.Types.Handler
                              Memegen.App.AppState Memegen.App.AppState ())]
                   ww3 :: Snap.Snaplet.Internal.Types.Handler
                            Memegen.App.AppState Memegen.App.AppState ()
                          -> Snap.Snaplet.Internal.Types.Handler
                               Memegen.App.AppState Memegen.App.AppState ()
                   ww4 :: Snap.Snaplet.Internal.Types.SnapletConfig
                   ww5 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Data.Text.Internal.Text
                   ww6 :: GHC.Base.String
                   ww7 :: (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                           -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                          -> GHC.Types.IO ()
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Snap.Snaplet.Internal.Initializer.$wa2
                   @ Memegen.App.AppState
                   @ Memegen.App.AppState
                   Memegen.Lib.memegenEntry5
                   Memegen.Lib.memegenEntry4
                   (GHC.Base.Nothing @ (GHC.Types.IO GHC.IO.FilePath))
                   Memegen.Lib.memegenEntry3
                     `cast`
                   (Trans
                        (<(Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                           -> Control.Lens.Internal.Context.Pretext
                                (->)
                                (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                                (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                                (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState))
                          -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                          -> Control.Lens.Internal.Context.Pretext
                               (->)
                               (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                               (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                               (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)>_R
                         ->_R <Snap.Snaplet.Internal.Types.InitializerState
                                 Memegen.App.AppState>_R
                         ->_R Trans
                                  (Sym (GHC.Types.NTCo:IO[0]
                                            <((Memegen.App.AppState,
                                               Snap.Snaplet.Internal.Types.InitializerState
                                                 Memegen.App.AppState),
                                              Snap.Snaplet.Internal.Types.Hook
                                                Memegen.App.AppState)>_R))
                                  (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                            <Snap.Snaplet.Internal.Types.Hook
                                               Memegen.App.AppState>_N
                                            <GHC.Types.IO>_R
                                            <(Memegen.App.AppState,
                                              Snap.Snaplet.Internal.Types.InitializerState
                                                Memegen.App.AppState)>_N)))
                        (Trans
                             (Sym (Snap.Snaplet.Internal.RST.NTCo:RST[0]
                                       <(Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                                         -> Control.Lens.Internal.Context.Pretext
                                              (->)
                                              (Snap.Snaplet.Internal.Types.Snaplet
                                                 Memegen.App.AppState)
                                              (Snap.Snaplet.Internal.Types.Snaplet
                                                 Memegen.App.AppState)
                                              (Snap.Snaplet.Internal.Types.Snaplet
                                                 Memegen.App.AppState))
                                        -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                                        -> Control.Lens.Internal.Context.Pretext
                                             (->)
                                             (Snap.Snaplet.Internal.Types.Snaplet
                                                Memegen.App.AppState)
                                             (Snap.Snaplet.Internal.Types.Snaplet
                                                Memegen.App.AppState)
                                             (Snap.Snaplet.Internal.Types.Snaplet
                                                Memegen.App.AppState)>_R
                                       <Snap.Snaplet.Internal.Types.InitializerState
                                          Memegen.App.AppState>_N
                                       <Control.Monad.Trans.Writer.Lazy.WriterT
                                          (Snap.Snaplet.Internal.Types.Hook Memegen.App.AppState)
                                          GHC.Types.IO>_R
                                       <Memegen.App.AppState>_N))
                             (Trans
                                  (Sym (Snap.Snaplet.Internal.LensT.NTCo:LensT[0]
                                            <Snap.Snaplet.Internal.Types.Snaplet
                                               Memegen.App.AppState>_N
                                            <Snap.Snaplet.Internal.Types.Snaplet
                                               Memegen.App.AppState>_N) <Snap.Snaplet.Internal.Types.InitializerState
                                                                           Memegen.App.AppState>_N <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                                                      (Snap.Snaplet.Internal.Types.Hook
                                                                                                         Memegen.App.AppState)
                                                                                                      GHC.Types.IO>_N)
                                  (Sym (Snap.Snaplet.Internal.Types.NTCo:Initializer[0]
                                            <Memegen.App.AppState>_N
                                            <Memegen.App.AppState>_N)) <Memegen.App.AppState>_N)))
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   w1) -}
67f3d1af15e254e7a28b40c2cb09cc6b
  $wa2 ::
    ((Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
      -> Control.Lens.Internal.Context.Pretext
           (->)
           (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
           (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
           (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState))
     -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
     -> Control.Lens.Internal.Context.Pretext
          (->)
          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState))
    -> GHC.Types.Bool
    -> GHC.IORef.IORef (GHC.Types.IO ())
    -> [(Data.ByteString.Internal.ByteString,
         Snap.Snaplet.Internal.Types.Handler
           Memegen.App.AppState Memegen.App.AppState ())]
    -> (Snap.Snaplet.Internal.Types.Handler
          Memegen.App.AppState Memegen.App.AppState ()
        -> Snap.Snaplet.Internal.Types.Handler
             Memegen.App.AppState Memegen.App.AppState ())
    -> Snap.Snaplet.Internal.Types.SnapletConfig
    -> GHC.IORef.IORef Data.Text.Internal.Text
    -> GHC.Base.String
    -> ((Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
         -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
        -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((Memegen.App.AppState,
            Snap.Snaplet.Internal.Types.InitializerState Memegen.App.AppState),
           Snap.Snaplet.Internal.Types.Hook Memegen.App.AppState) #)
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,1*U><L,U><L,U(U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
e166a23aded430ca9191de1b2db516f0
  $wf :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [0] -}
3bdb325ecab48c1ce5fc015af304ba33
  $wpoly_go10 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Data.ByteString.Internal.ByteString a
    -> a
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><S,1*U>,
     Inline: [0] -}
4adeaae17945e93b56ef93a168dd0567
  memegenEntry :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Memegen.Lib.memegenEntry1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
882ee7998c9ff495bb93ac09433f864a
  memegenEntry1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Snap.Snaplet.Internal.Initializer.serveSnaplet1
                   @ Memegen.App.AppState
                   Memegen.Lib.memegenEntry6
                   Memegen.Lib.memegenEntry2
                     `cast`
                   (Trans
                        (<Control.Lens.Lens.ALens'
                            (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                            (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)>_R
                         ->_R <Snap.Snaplet.Internal.Types.InitializerState
                                 Memegen.App.AppState>_R
                         ->_R Trans
                                  (Sym (GHC.Types.NTCo:IO[0]
                                            <((Snap.Snaplet.Internal.Types.Snaplet
                                                 Memegen.App.AppState,
                                               Snap.Snaplet.Internal.Types.InitializerState
                                                 Memegen.App.AppState),
                                              Snap.Snaplet.Internal.Types.Hook
                                                Memegen.App.AppState)>_R))
                                  (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                            <Snap.Snaplet.Internal.Types.Hook
                                               Memegen.App.AppState>_N
                                            <GHC.Types.IO>_R
                                            <(Snap.Snaplet.Internal.Types.Snaplet
                                                Memegen.App.AppState,
                                              Snap.Snaplet.Internal.Types.InitializerState
                                                Memegen.App.AppState)>_N)))
                        (Trans
                             (Sym (Snap.Snaplet.Internal.RST.NTCo:RST[0]
                                       <Control.Lens.Lens.ALens'
                                          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                                          (Snap.Snaplet.Internal.Types.Snaplet
                                             Memegen.App.AppState)>_R
                                       <Snap.Snaplet.Internal.Types.InitializerState
                                          Memegen.App.AppState>_N
                                       <Control.Monad.Trans.Writer.Lazy.WriterT
                                          (Snap.Snaplet.Internal.Types.Hook Memegen.App.AppState)
                                          GHC.Types.IO>_R
                                       <Snap.Snaplet.Internal.Types.Snaplet
                                          Memegen.App.AppState>_N))
                             (Trans
                                  (Trans
                                       (Sym (Snap.Snaplet.Internal.LensT.NTCo:LensT[0]
                                                 <Snap.Snaplet.Internal.Types.Snaplet
                                                    Memegen.App.AppState>_N
                                                 <Snap.Snaplet.Internal.Types.Snaplet
                                                    Memegen.App.AppState>_N) <Snap.Snaplet.Internal.Types.InitializerState
                                                                                Memegen.App.AppState>_N <Control.Monad.Trans.Writer.Lazy.WriterT
                                                                                                           (Snap.Snaplet.Internal.Types.Hook
                                                                                                              Memegen.App.AppState)
                                                                                                           GHC.Types.IO>_N)
                                       (Sym (Snap.Snaplet.Internal.Types.NTCo:Initializer[0]
                                                 <Memegen.App.AppState>_N
                                                 <Memegen.App.AppState>_N)) <Snap.Snaplet.Internal.Types.Snaplet
                                                                               Memegen.App.AppState>_N)
                                  (Sym (Snap.Snaplet.Internal.Types.NTCo:SnapletInit[0]
                                            <Memegen.App.AppState>_N
                                            <Memegen.App.AppState>_N)))))) -}
3dd436b1d5028e0aa88362068df10861
  memegenEntry2 ::
    Control.Lens.Lens.ALens'
      (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
      (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
    -> Snap.Snaplet.Internal.Types.InitializerState
         Memegen.App.AppState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState,
            Snap.Snaplet.Internal.Types.InitializerState Memegen.App.AppState),
           Snap.Snaplet.Internal.Types.Hook Memegen.App.AppState) #)
  {- Arity: 3,
     Strictness: <L,U><S(SLLLLSLL),1*U(1*U,U,U,U,1*U(U,U,U,U,U,U,U,U),1*U(U),U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Control.Lens.Lens.ALens'
                          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                   w1 :: Snap.Snaplet.Internal.Types.InitializerState
                           Memegen.App.AppState
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Snap.Snaplet.Internal.Types.InitializerState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww6
                        `cast`
                      (GHC.IORef.NTCo:IORef[0] <Data.Text.Internal.Text>_N) of ww9 { GHC.STRef.STRef ww10 ->
                 Memegen.Lib.$wa1 w ww1 ww2 ww3 ww4 ww5 ww10 ww7 ww8 w2 } }) -}
edc7490483905573628040d5b8a1381c
  memegenEntry3 ::
    ((Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
      -> Control.Lens.Internal.Context.Pretext
           (->)
           (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
           (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
           (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState))
     -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
     -> Control.Lens.Internal.Context.Pretext
          (->)
          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
          (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState))
    -> Snap.Snaplet.Internal.Types.InitializerState
         Memegen.App.AppState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((Memegen.App.AppState,
            Snap.Snaplet.Internal.Types.InitializerState Memegen.App.AppState),
           Snap.Snaplet.Internal.Types.Hook Memegen.App.AppState) #)
  {- Arity: 3,
     Strictness: <L,U><S,1*U(U,U,1*U,U,U(U,U,U,U,U,U,U,U),U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                         -> Control.Lens.Internal.Context.Pretext
                              (->)
                              (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                              (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                              (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState))
                        -> Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState
                        -> Control.Lens.Internal.Context.Pretext
                             (->)
                             (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                             (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                             (Snap.Snaplet.Internal.Types.Snaplet Memegen.App.AppState)
                   w1 :: Snap.Snaplet.Internal.Types.InitializerState
                           Memegen.App.AppState
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Snap.Snaplet.Internal.Types.InitializerState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Memegen.Lib.$wa2 w ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 w2 }) -}
d108cba9c41431da4d6a0e84b1d81095
  memegenEntry4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Meme generator."#) -}
295f5498441042f2d6688c8f5329bfab
  memegenEntry5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "memegen"#) -}
ba1729d2d3540b09a015f1231614e79e
  memegenEntry6 ::
    Snap.Internal.Http.Server.Config.Config
      Snap.Internal.Types.Snap Snap.Snaplet.Config.AppConfig
  {- Unfolding: (Snap.Internal.Http.Server.Config.Config
                   @ Snap.Internal.Types.Snap
                   @ Snap.Snaplet.Config.AppConfig
                   Snap.Internal.Http.Server.Config.defaultConfig21
                   Snap.Internal.Http.Server.Config.defaultConfig18
                   Snap.Internal.Http.Server.Config.defaultConfig15
                   Snap.Internal.Http.Server.Config.defaultConfig13
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Snap.Internal.Http.Server.Config.defaultConfig11
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Snap.Internal.Http.Server.Config.defaultConfig9
                   Snap.Internal.Http.Server.Config.defaultConfig7
                   Snap.Internal.Http.Server.Config.defaultConfig6
                   Snap.Internal.Http.Server.Config.defaultConfig4
                   Snap.Internal.Http.Server.Config.defaultConfig3
                   Snap.Internal.Http.Server.Config.defaultConfig3
                   Memegen.Lib.memegenEntry7
                   Snap.Internal.Http.Server.Config.defaultConfig1
                   (GHC.Base.Nothing @ Snap.Snaplet.Config.AppConfig)
                   (GHC.Base.Nothing @ Snap.Internal.Http.Server.Config.ConfigBackend)
                   (GHC.Base.Nothing @ Snap.Util.Proxy.ProxyType)
                   (GHC.Base.Nothing
                      @ (Snap.Internal.Http.Server.Config.StartupInfo
                           Snap.Internal.Types.Snap Snap.Snaplet.Config.AppConfig
                         -> GHC.Types.IO ()))) -}
04622529ce1337b821e50378f2682b82
  memegenEntry7 ::
    GHC.Base.Maybe
      (GHC.Exception.SomeException -> Snap.Internal.Types.Snap ())
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Exception.SomeException -> Snap.Internal.Types.Snap ())
                   Memegen.Lib.memegenEntry8) -}
ce328a6a7e125b20fdd2a20f43466d78
  memegenEntry8 ::
    GHC.Exception.SomeException -> Snap.Internal.Types.Snap ()
  {- Arity: 1,
     Unfolding: (Snap.Internal.Http.Server.Config.defaultErrorHandler
                   @ Snap.Internal.Types.Snap
                   Snap.Internal.Types.$fMonadSnapSnap) -}
"SPEC/Memegen.Lib $fAlternativeHandler @ AppState @ AppState" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                 (Snap.Snaplet.Internal.Types.Handler
                                                                                                    Memegen.App.AppState
                                                                                                    Memegen.App.AppState)
  Snap.Snaplet.Internal.Types.$fAlternativeHandler @ Memegen.App.AppState
                                                   @ Memegen.App.AppState
                                                   $dApplicative
  = Memegen.Lib.$s$fAlternativeHandler
"SPEC/Memegen.Lib $fApplicativeHandler @ AppState @ AppState" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                             (Snap.Snaplet.Internal.Types.Handler
                                                                                                Memegen.App.AppState
                                                                                                Memegen.App.AppState)
  Snap.Snaplet.Internal.Types.$fApplicativeHandler @ Memegen.App.AppState
                                                   @ Memegen.App.AppState
                                                   $dFunctor
  = Memegen.Lib.$s$fAlternativeHandler_$s$fApplicativeHandler
"SPEC/Memegen.Lib $fMonadCatchIOHandler @ AppState @ AppState" [ALWAYS] forall $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                              (Snap.Snaplet.Internal.Types.Handler
                                                                                                 Memegen.App.AppState
                                                                                                 Memegen.App.AppState)
  Snap.Snaplet.Internal.Types.$fMonadCatchIOHandler @ Memegen.App.AppState
                                                    @ Memegen.App.AppState
                                                    $dMonadIO
  = Memegen.Lib.$s$fMonadCatchIOHandler
"SPEC/Memegen.Lib $fMonadHandler @ AppState @ AppState" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                           (Snap.Snaplet.Internal.Types.Handler
                                                                                              Memegen.App.AppState
                                                                                              Memegen.App.AppState)
  Snap.Snaplet.Internal.Types.$fMonadHandler @ Memegen.App.AppState
                                             @ Memegen.App.AppState
                                             $dApplicative
  = Memegen.Lib.$s$fMonadCatchIOHandler_$s$fMonadHandler
"SPEC/Memegen.Lib $fMonadIOHandler @ AppState @ AppState" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                       (Snap.Snaplet.Internal.Types.Handler
                                                                                          Memegen.App.AppState
                                                                                          Memegen.App.AppState)
  Snap.Snaplet.Internal.Types.$fMonadIOHandler @ Memegen.App.AppState
                                               @ Memegen.App.AppState
                                               $dMonad
  = Memegen.Lib.$s$fMonadCatchIOHandler_$s$fMonadIOHandler
"SPEC/Memegen.Lib $fMonadPlusHandler @ AppState @ AppState" [ALWAYS] forall $dAlternative :: GHC.Base.Alternative
                                                                                               (Snap.Snaplet.Internal.Types.Handler
                                                                                                  Memegen.App.AppState
                                                                                                  Memegen.App.AppState)
                                                                            $dMonad :: GHC.Base.Monad
                                                                                         (Snap.Snaplet.Internal.Types.Handler
                                                                                            Memegen.App.AppState
                                                                                            Memegen.App.AppState)
  Snap.Snaplet.Internal.Types.$fMonadPlusHandler @ Memegen.App.AppState
                                                 @ Memegen.App.AppState
                                                 $dAlternative
                                                 $dMonad
  = Memegen.Lib.$s$fMonadPlusHandler
"SPEC/Memegen.Lib $fMonadSnapHandler @ AppState @ AppState" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                         (Snap.Snaplet.Internal.Types.Handler
                                                                                            Memegen.App.AppState
                                                                                            Memegen.App.AppState)
                                                                            $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                           (Snap.Snaplet.Internal.Types.Handler
                                                                                              Memegen.App.AppState
                                                                                              Memegen.App.AppState)
                                                                            $dMonadCatchIO :: Control.Monad.CatchIO.MonadCatchIO
                                                                                                (Snap.Snaplet.Internal.Types.Handler
                                                                                                   Memegen.App.AppState
                                                                                                   Memegen.App.AppState)
                                                                            $dMonadPlus :: GHC.Base.MonadPlus
                                                                                             (Snap.Snaplet.Internal.Types.Handler
                                                                                                Memegen.App.AppState
                                                                                                Memegen.App.AppState)
                                                                            $dFunctor :: GHC.Base.Functor
                                                                                           (Snap.Snaplet.Internal.Types.Handler
                                                                                              Memegen.App.AppState
                                                                                              Memegen.App.AppState)
                                                                            $dApplicative :: GHC.Base.Applicative
                                                                                               (Snap.Snaplet.Internal.Types.Handler
                                                                                                  Memegen.App.AppState
                                                                                                  Memegen.App.AppState)
                                                                            $dAlternative :: GHC.Base.Alternative
                                                                                               (Snap.Snaplet.Internal.Types.Handler
                                                                                                  Memegen.App.AppState
                                                                                                  Memegen.App.AppState)
  Snap.Snaplet.Internal.Types.$fMonadSnapHandler @ Memegen.App.AppState
                                                 @ Memegen.App.AppState
                                                 $dMonad
                                                 $dMonadIO
                                                 $dMonadCatchIO
                                                 $dMonadPlus
                                                 $dFunctor
                                                 $dApplicative
                                                 $dAlternative
  = Memegen.Lib.$s$fMonadSnapHandler
"SPEC/Memegen.Lib db @ (->) @ (Pretext
                                (->) (Snaplet Sqlite) (Snaplet Sqlite))" [ALWAYS] forall $dProfunctor :: Data.Profunctor.Unsafe.Profunctor
                                                                                                                                                  (->)
                                                                                                                                $dFunctor :: GHC.Base.Functor
                                                                                                                                               (Control.Lens.Internal.Context.Pretext
                                                                                                                                                  (->)
                                                                                                                                                  (Snap.Snaplet.Internal.Types.Snaplet
                                                                                                                                                     Snap.Snaplet.SqliteSimple.Sqlite)
                                                                                                                                                  (Snap.Snaplet.Internal.Types.Snaplet
                                                                                                                                                     Snap.Snaplet.SqliteSimple.Sqlite))
  Memegen.App.db @ (->)
                 @ (Control.Lens.Internal.Context.Pretext
                      (->)
                      (Snap.Snaplet.Internal.Types.Snaplet
                         Snap.Snaplet.SqliteSimple.Sqlite)
                      (Snap.Snaplet.Internal.Types.Snaplet
                         Snap.Snaplet.SqliteSimple.Sqlite))
                 $dProfunctor
                 $dFunctor
  = Memegen.Lib.$sdb
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

