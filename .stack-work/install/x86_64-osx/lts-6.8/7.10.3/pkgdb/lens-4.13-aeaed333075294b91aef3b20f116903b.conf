name: lens
version: 4.13
id: lens-4.13-aeaed333075294b91aef3b20f116903b
key: lens_GUhLZmPn08l1pkGqj7n9if
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.Review Control.Lens.Internal.Setter
    Control.Lens.Internal.TH Control.Lens.Internal.Zoom
    Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
    Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
    Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
    Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
    Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
    Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
    Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
    Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
    System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
    Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/lib/x86_64-osx-ghc-7.10.3/lens-4.13-GUhLZmPn08l1pkGqj7n9if
library-dirs: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/lib/x86_64-osx-ghc-7.10.3/lens-4.13-GUhLZmPn08l1pkGqj7n9if
data-dir: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/share/x86_64-osx-ghc-7.10.3/lens-4.13
hs-libraries: HSlens-4.13-GUhLZmPn08l1pkGqj7n9if
depends:
    array-0.5.1.0-960bf9ae8875cc30355e086f8853a049
    base-4.8.2.0-bfcc6de9ee2962ae54db40ece3022dc5
    base-orphans-0.5.4-43f3d27c7bf4b3afcb3d01a72ca02a01
    bifunctors-5.2-8b55500aaedfbed4c31e2b78147940d0
    bytestring-0.10.6.0-acad045b3a1833aefbe19db17d332c3a
    comonad-4.2.7.2-891d4a06c35d138b6c2ac4a7b37378b6
    containers-0.5.6.2-1281f6ac62b47acf472f6cdcec6a4f4b
    contravariant-1.4-9ada03a9551fbf28ef0165be8f6bc4d4
    distributive-0.5.0.2-62adbaf9df801473b6dcca620536e21d
    exceptions-0.8.3-d4f6a36a62bf146f0a4221b7c358d663
    filepath-1.4.0.0-f97d1e4aebfd7a03be6980454fe31d6e
    free-4.12.4-8005deffbef74d5fd95f2bc271a02ae3
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.4.0-3250ea34f9cb1d491a857fb6cd256268
    kan-extensions-4.2.3-4e8bf57f95b771e485c9aad15e21138f
    mtl-2.2.1-3af90341e75ee52dfc4e3143b4e5d219
    parallel-3.2.1.0-a8b9822e86c6a94393499110f2f6f93e
    profunctors-5.2-69989025605d05b81ea8f2f37c991d48
    reflection-2.1.2-a1800076486d650159694cb5f635481f
    semigroupoids-5.0.1-bc0841ddab7cb589733bfc57790fe173
    semigroups-0.18.1-9c9c858e340086d42cf0aca174558de4
    tagged-0.8.4-1f9b177cb4065cbcffaa9a2d104acc5f
    template-haskell-2.10.0.0-c5036b5d1f11290a936c690d2f1bbd7f
    text-1.2.2.1-3d0a931105ed331bf2fb8b46dcae08ba
    transformers-0.4.2.0-81450cd8f86b36eaa8fa0cbaf6efc3a3
    transformers-compat-0.4.0.4-8aa4073730c676dbe210ea8bffd8d092
    unordered-containers-0.2.7.1-d8fd87941bc7fbfca844052c487c792f
    vector-0.11.0.0-324da2b07f25721d305480db94a9f1d6
    void-0.7.1-2de3b7ab44b3e20798f39b12f1c64f9b
haddock-interfaces: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/doc/lens-4.13/lens.haddock
haddock-html: /Users/zxy/haskell/zurihac/codelab/memegen/.stack-work/install/x86_64-osx/lts-6.8/7.10.3/doc/lens-4.13
